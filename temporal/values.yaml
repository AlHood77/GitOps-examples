temporal-stack: 
  nameOverride: "shared-services"
  fullnameOverride: ""

  # Chart debug mode
  # (eg. disable helm hook delete policy)
  debug: false

  # Custom Service account management
  serviceAccount:
    create: false
    name:
    extraAnnotations:

  server:
    enabled: true
    sidecarContainers:
    image:
      repository: temporalio/server
      tag: 1.17.4
      pullPolicy: IfNotPresent

    # Global default settings (can be overridden per service)
    replicaCount: 1
    metrics:
      # Annotate pods directly with Prometheus annotations.
      # Use this if you installed Prometheus from a Helm chart.
      annotations:
        enabled: true
    podAnnotations: {}
    podLabels: {}
    resources:
    limits:
     cpu: 100m
     memory: 128Mi
    requests:
     cpu: 100m
     memory: 128Mi
    nodeSelector: {}
    tolerations: []
    affinity: {}
    additionalVolumes: []
    additionalVolumeMounts: []

    config:
      logLevel: "debug,info"

      # IMPORTANT: This value cannot be changed, once it's set.
      numHistoryShards: 512

      persistence:
        default:
          driver: "sql"

          sql:
            driver: "postgres"
            host: _HOST_
            port: 5432
            database: temporal
            user: _USERNAME_
            password: _PASSWORD_
            maxConns: 20
            maxConnLifetime: "1h"

        visibility:
          driver: "sql"

          sql:
            driver: "postgres"
            host: _HOST_
            port: 5432
            database: temporal_visibility
            user: _USERNAME_
            password: _PASSWORD_
            maxConns: 20
            maxConnLifetime: "1h"

    frontend:
      # replicaCount: 1
      service:
        annotations: {} # Evaluated as template
        type: ClusterIP
        port: 7233
      metrics:
        annotations:
          enabled: true
      podAnnotations: {}
      podLabels: {}
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}

    history:
      # replicaCount: 1
      service:
        # type: ClusterIP
        port: 7234
      metrics:
        annotations:
          enabled: true
      podAnnotations: {}
      podLabels: {}
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}

    matching:
      # replicaCount: 1
      service:
        # type: ClusterIP
        port: 7235
      metrics:
        annotations:
          enabled: false
      podAnnotations: {}
      podLabels: {}
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}

    worker:
      # replicaCount: 1
      service:
        # type: ClusterIP
        port: 7239
      metrics:
        annotations:
          enabled: true
      podAnnotations: {}
      podLabels: {}
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}

  admintools:
    enabled: true
    image:
      repository: temporalio/admin-tools
      tag: 1.17.4
      pullPolicy: IfNotPresent

    service:
      type: ClusterIP
      port: 22
      annotations: {}
    podLabels: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  web:
    enabled: true
    config:
      # server/config.yml file content
      auth:
        enabled: false
      routing:
        default_to_namespace: # internal use only
        issue_report_link: https://github.com/temporalio/web/issues/new/choose # set this field if you need to direct people to internal support forums

    replicaCount: 1

    image:
      repository: temporalio/ui
      tag: latest
      pullPolicy: IfNotPresent

    service:
      # set type to NodePort if access to web needs access from outside the cluster
      # for more info see https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
      type: ClusterIP
      port: 8080
      annotations: {}
      # loadBalancerIP:

    podAnnotations: {}
    podLabels: {}

    resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

    nodeSelector: {}

    tolerations: []

    affinity: {}

  schema:
    setup:
      enabled: false
    update:
      enabled: false

  postgresql:
    enabled: true

  elasticsearch:
    enabled: false

  prometheus:
    enabled: false

  grafana:
    enabled: false


  cassandra:
    enabled: false

  mysql:
    enabled: false
